{"version":3,"sources":["Components/Alert.js","Components/Header/Header.js","Components/Textarea/Textarea.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","captalizeText","word","charAt","toUpperCase","slice","react_default","a","createElement","style","height","alertMsg","className","concat","type","role","msg","Header","handleThemeClick","event","color","target","value","console","log","document","body","backgroundColor","mode","href","data-bs-toggle","aria-expanded","onClick","btnmode","handleMode","enablemode","Textarea","_useState","useState","_useState2","Object","slicedToArray","text","setText","bgMode","_useState3","_useState4","textareaStyle","txtMode","textareaBgColor","rows","onChange","length","showAlert","toLowerCase","newtxt","split","i","join","spaceFound","splice","filter","element","toFixed","App","setMode","changeMode","btnMode","changeBtnMode","_useState5","_useState6","modeName","changemodeName","_useState7","_useState8","alert","setAlert","_useState9","_useState10","setTextareaBgColor","Header_Header","title","Components_Alert","Textarea_Textarea","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"6OAgBeA,MAdf,SAAeC,GACb,IAAMC,EAAgB,SAACC,GACrB,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,IAEnD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,OAAO,SACnBV,EAAMW,UAAYL,EAAAC,EAAAC,cAAA,OAAKI,UAAS,eAAAC,OAAiBb,EAAMW,SAASG,KAAI,gCAAgCC,KAAK,SAC5GT,EAAAC,EAAAC,cAAA,cAASP,EAAcD,EAAMW,SAASG,OAAe,KAAGb,EAAcD,EAAMW,SAASK,cCLxE,SAASC,EAAOjB,GAS7B,IAAMkB,EAAiB,SAACC,GACtB,IAAIC,EAAQD,EAAME,OAAOC,MACzBC,QAAQC,IAAIJ,GACZK,SAASC,KAAKjB,MAAMkB,gBAAkBP,GAGxC,OACEd,EAAAC,EAAAC,cAAA,WAEJF,EAAAC,EAAAC,cAAA,OAAKI,UAAS,iBAAAC,OAAmBb,EAAM4B,KAAI,QAAAf,OAAOb,EAAM4B,OACtDtB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,kDACbN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMI,UAAU,wBAAuB,mBACvCN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAeiB,KAAK,KAAI,SAIvCvB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UACfN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACfN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,oCAAoCE,KAAK,SAASgB,iBAAe,WAAWC,gBAAc,SAAQ,gBAGpHzB,EAAAC,EAAAC,cAAA,MAAII,UAAU,qBACZN,EAAAC,EAAAC,cAAA,MAAII,UAAU,4BAA2BN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,uBAAuBU,MAAM,UAAUU,QAASd,GAAkB,mBAC7HZ,EAAAC,EAAAC,cAAA,MAAII,UAAU,4BAA2BN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,uBAAuBU,MAAM,UAAUU,QAASd,GAAkB,iBAC7HZ,EAAAC,EAAAC,cAAA,MAAII,UAAU,2BAA0BN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,uBAAuBU,MAAM,UAAUU,QAASd,GAAkB,eAG9HZ,EAAAC,EAAAC,cAAA,UAAQI,UAAS,uBAAAC,OAAyBb,EAAMiC,SAAWD,QAAShC,EAAMkC,YAAalC,EAAMmC,sBCtChF,SAASC,EAASpC,GAAO,IAAAqC,EAEfC,mBAAS,sBAAqBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA9CK,EAAIH,EAAA,GAACI,EAAOJ,EAAA,GAEnBhB,QAAQC,IAAIxB,EAAM4C,QA4ClB,IA6BCC,EACwCP,mBAAS,IAGhDQ,EAAAN,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GAHKE,EAAaD,EAAA,GAAiBA,EAAA,GAIrC,OACExC,EAAAC,EAAAC,cAAA,OAAKI,UAAS,qBAAAC,OAAuBb,EAAM4C,OAAM,UAAA/B,OAASb,EAAMgD,QAAO,YAAYvC,MAAOsC,GAC1FzC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,kBACXN,EAAAC,EAAAC,cAAA,MAAII,UAAU,QAAO,oBACrBN,EAAAC,EAAAC,cAAA,YAAUI,UAAS,8BAAAC,OAAgCb,EAAMiD,gBAAe,UAAApC,OAASb,EAAMgD,SAAWE,KAAK,IAAI5B,MAAOoB,EAAMS,SA1C9H,SAAgChC,GAE9BwB,EAAQxB,EAAME,OAAOC,UAyCjBhB,EAAAC,EAAAC,cAAA,UAAQI,UAAU,4BAA4BoB,QAjFpD,WAEKU,EAAKU,OAAO,GACb7B,QAAQC,IAAIkB,EAAKU,QACjBpD,EAAMqD,UAAU,gBAAgB,YAElCV,EAAQD,EAAKtC,iBA2E+D,wBACxEE,EAAAC,EAAAC,cAAA,UAAQI,UAAU,4BAA4BoB,QAxEpD,WACKU,EAAKU,OAAO,GACb7B,QAAQC,IAAIkB,EAAKU,QACjBpD,EAAMqD,UAAU,gBAAgB,YAElCV,EAAQD,EAAKY,iBAmE+D,wBACxEhD,EAAAC,EAAAC,cAAA,UAAQI,UAAU,4BAA4BoB,QAhEpD,WACE,GAAGU,EAAKU,OAAO,EACb7B,QAAQC,IAAIkB,EAAKU,QACjBpD,EAAMqD,UAAU,gBAAgB,eAC7B,CACL,IAAIE,EAASb,EAAKvC,OAAO,GAAGC,cAAgBsC,EAAKrC,MAAM,GACtDkD,EAASA,EAAOC,MAAM,IACvB,IAAI,IAAIC,EAAE,EAAEA,EAAEF,EAAOH,OAAOK,IACX,MAAZF,EAAOE,KACTF,EAAOE,EAAE,GAAIF,EAAOE,EAAE,GAAGrD,eAK5BmD,EAAOG,KAAK,IACZf,EAAQY,EAAOG,KAAK,QAiDyD,mBACzEpD,EAAAC,EAAAC,cAAA,UAAQI,UAAU,4BAA4BoB,QAjC5B,WACtB,GAAGU,EAAKU,OAAO,EACb7B,QAAQC,IAAIkB,EAAKU,QACjBpD,EAAMqD,UAAU,gBAAgB,eAC7B,CAGL,IAFA,IAAIE,EAASb,EAAKc,MAAM,IACpBC,EAAE,EAAEE,GAAW,GACA,IAAbA,GACW,MAAZJ,EAAOE,IAAwB,MAAdF,EAAOE,EAAE,KAC5BF,EAAOK,OAAOH,EAAE,EAAE,GAClBA,GAAI,GAEFA,IAAIF,EAAOH,OAAO,IACnBO,GAAW,GAEbF,IAEEF,EAAOG,KAAK,IACZf,EAAQY,EAAOG,KAAK,QAesD,uBAC1EpD,EAAAC,EAAAC,cAAA,UAAQI,UAAU,2BAA2BoB,QA3CjC,WACbU,EAAKU,OAAO,GACb7B,QAAQC,IAAIkB,EAAKU,QACjBpD,EAAMqD,UAAU,gBAAgB,YAElCV,EAAQ,MAsC+D,eAEvErC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,kBACbN,EAAAC,EAAAC,cAAA,MAAII,UAAU,QAAO,qBACrBN,EAAAC,EAAAC,cAAA,SAAIkC,EAAKc,MAAM,OAAOK,OAAO,SAAAC,GAAU,OAAwB,IAAjBA,EAAQV,SAAaA,OAAO,UAAQV,EAAKU,OAAO,eAC9F9C,EAAAC,EAAAC,cAAA,UAAK,IAAOkC,EAAKc,MAAM,KAAKK,OAAO,SAAAC,GAAU,OAAwB,IAAjBA,EAAQV,SAAaA,QAAQW,QAAQ,GAAG,sBAC5FzD,EAAAC,EAAAC,cAAA,UAAI,WACJF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,sBAAsB8B,KClC1BsB,MAtDf,WAAe,IAAA3B,EACcC,mBAAS,SAAQC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAArC4B,EAAO1B,EAAA,GAAC2B,EAAU3B,EAAA,GAAAM,EACKP,mBAAS,QAAOQ,EAAAN,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GAAvCsB,EAAOrB,EAAA,GAACsB,EAAatB,EAAA,GAAAuB,EACI/B,mBAAS,oBAAmBgC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAArDE,EAAQD,EAAA,GAACE,EAAcF,EAAA,GAAAG,EACPnC,mBAAS,MAAKoC,EAAAlC,OAAAC,EAAA,EAAAD,CAAAiC,EAAA,GAA9BE,EAAKD,EAAA,GAACE,EAAQF,EAAA,GAAAG,EACwBvC,mBAAS,SAAQwC,EAAAtC,OAAAC,EAAA,EAAAD,CAAAqC,EAAA,GAAvD5B,EAAe6B,EAAA,GAACC,EAAkBD,EAAA,GAgCzC,OACExE,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OAEfN,EAAAC,EAAAC,cAACwE,EAAM,CAACpD,KAAMqC,EAAS/B,WAvBzB,WACe,SAAV+B,GACDC,EAAW,SACXE,EAAc,QACdI,EAAe,oBACf/C,SAASC,KAAKjB,MAAMkB,gBAAiB,QACrCF,SAASwD,MAAQ,YAEjBF,EAAmB,WAEnBb,EAAW,QACXE,EAAc,SACdI,EAAe,qBACf/C,SAASC,KAAKjB,MAAMkB,gBAAiB,UACrCF,SAASwD,MAAQ,mBAEjBF,EAAmB,UAO0B9C,QAASkC,EAAShC,WAAYoC,IAC7EjE,EAAAC,EAAAC,cAAC0E,EAAK,CAACvE,SAAUgE,IACjBrE,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACfN,EAAAC,EAAAC,cAAC2E,EAAQ,CAAC9B,UArCK,SAAC+B,EAAQtE,GACxB8D,EACE,CAAC5D,IAAIoE,EACHtE,KAAKA,IAELuE,WAAW,WACTT,EAAS,OACR,MA8ByBhC,OAAQqB,EAAShB,gBAAiBA,EAAiBD,QAASmB,OC5CjFmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,kBCEDY,IAASC,WAAW3E,SAAS4E,eAAe,SACpDC,OACHhG,EAAAC,EAAAC,cAACF,EAAAC,EAAMgG,WAAU,KACfjG,EAAAC,EAAAC,cAACgG,EAAG,QAORlB","file":"static/js/main.0640986e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const captalizeText = (word) =>{\r\n    return word.charAt(0).toUpperCase() + word.slice(1)\r\n  }\r\n  return (\r\n    <div style={{height:\"40px\"}}>\r\n    {props.alertMsg && <div className={`alert alert-${props.alertMsg.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{captalizeText(props.alertMsg.type)}</strong>: {captalizeText(props.alertMsg.msg)}\r\n</div>\r\n  }\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert","import React, { useState } from 'react'\r\n// import { NavLink } from 'react-router-dom'\r\nimport './Header.css'\r\n\r\nexport default function Header(props) {\r\n  // const [pickedColor,setPickedColor] = useState(\"white\")\r\n  // const handleThemeClick3=()=>{\r\n  //   setPickedColor(\"#8D021F\")\r\n  //   console.log(pickedColor)\r\n  //   document.body.style.backgroundColor = pickedColor\r\n  // }\r\n  // document.body.style.backgroundColor = pickedColor\r\n \r\n  const handleThemeClick=(event)=>{\r\n    let color = event.target.value\r\n    console.log(color)\r\n    document.body.style.backgroundColor = color\r\n  }\r\n\r\n  return (\r\n    <div>\r\n{/* <!-- As a heading --> */}\r\n<nav className={`navbar navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid d-flex justify-content-between\">\r\n    <div>\r\n    <span className=\"navbar-brand mb-0 h1\">TEXTUTILS-React</span>\r\n    <a className=\"navbar-brand\" href=\"/\">Home</a>\r\n    {/* <NavLink className=\"navbar-brand\" to=\"/\">Home</NavLink> */}\r\n    {/* <NavLink className=\"navbar-brand\" to=\"/about\">About Us</NavLink> */}\r\n    </div>\r\n  <div className=\"d-flex\">\r\n  <div className=\"dropdown mx-3\">\r\n  <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n    Select theme\r\n  </button>\r\n  <ul className=\"dropdown-menu p-0\">\r\n    <li className=\"dropdown-item bg-success\"><button className='btn text-light w-100' value=\"#004225\" onClick={handleThemeClick}>British Racing</button></li>\r\n    <li className=\"dropdown-item bg-primary\"><button className='btn text-light w-100' value=\"#0F4C81\" onClick={handleThemeClick}>Classic Blue</button></li>\r\n    <li className=\"dropdown-item bg-danger\"><button className='btn text-light w-100' value=\"#8D021F\" onClick={handleThemeClick}>Burgundy</button></li>\r\n  </ul>\r\n</div>\r\n  <button className={`btn darkModeBtn btn-${props.btnmode}`} onClick={props.handleMode}>{props.enablemode}</button>\r\n  </div>\r\n  </div>\r\n</nav>\r\n\r\n{/* <!-- As a link --> */}\r\n{/* <nav className=\"navbar bg-light\">\r\n  <div className=\"container-fluid\">\r\n    <span className=\"navbar-brand mb-0 h1\">Navbar heading</span>\r\n  </div>\r\n</nav> */}\r\n    </div>\r\n  )\r\n}\r\n","import React,{useState} from 'react'\r\nimport './Textarea.css'\r\n\r\nexport default function Textarea(props) {\r\n\r\n  const [text,setText] = useState('Given text area...')\r\n\r\n  console.log(props.bgMode)\r\n  \r\n  function handleUppercase(){\r\n    // console.log(\"up\")\r\n    if(text.length<1){\r\n      console.log(text.length)\r\n      props.showAlert(\"no text found\",\"warning\")\r\n    }else{\r\n    setText(text.toUpperCase())\r\n    // props.showAlert(\"converted to uppercase\",\"success\")\r\n    }\r\n  }\r\n  function handleLowercase(){\r\n    if(text.length<1){\r\n      console.log(text.length)\r\n      props.showAlert(\"no text found\",\"warning\")\r\n    }else{\r\n    setText(text.toLowerCase())\r\n    // props.showAlert(\"converted to lowercase\",\"success\")\r\n    }\r\n  }\r\n  function handleCapitalize(){\r\n    if(text.length<1){\r\n      console.log(text.length)\r\n      props.showAlert(\"no text found\",\"warning\")\r\n    }else{\r\n    let newtxt = text.charAt(0).toUpperCase() + text.slice(1)\r\n     newtxt = newtxt.split(\"\")\r\n    for(let i=0;i<newtxt.length;i++){\r\n      if(newtxt[i]===\" \"){\r\n       newtxt[i+1]= newtxt[i+1].toUpperCase()\r\n      }\r\n      // newtxt[i][0]=newtxt[i][0].toUpperCase()\r\n      // setText(text.charAt(i+1).toUpperCase())\r\n    }\r\n    newtxt.join(\"\")\r\n    setText(newtxt.join(\"\"))\r\n    // props.showAlert(\"text capitalized\",\"success\")\r\n  }\r\n  }\r\n  function handleTextareaOnChange(event){\r\n    // console.log(\"onchange\")\r\n    setText(event.target.value)\r\n  }\r\n  const handleClear=()=>{\r\n    if(text.length<1){\r\n      console.log(text.length)\r\n      props.showAlert(\"no text found\",\"warning\")\r\n    }else{\r\n    setText(\"\")\r\n    // props.showAlert(\"text cleared\",\"success\")\r\n    }\r\n  }\r\n  const handleExtraSpaces=()=>{\r\n    if(text.length<1){\r\n      console.log(text.length)\r\n      props.showAlert(\"no text found\",\"warning\")\r\n    }else{\r\n    let newtxt = text.split(\"\")\r\n    let i=0,spaceFound=true;\r\n    while(spaceFound===true){\r\n      if(newtxt[i]===\" \"&&newtxt[i+1]===\" \"){\r\n       newtxt.splice(i+1,1)\r\n       i=i-1;\r\n      }\r\n      if(i===newtxt.length-1){\r\n        spaceFound=false;\r\n      }\r\n      i++;\r\n    }\r\n        newtxt.join(\"\")\r\n        setText(newtxt.join(\"\"))\r\n    }\r\n  }\r\n  const [textareaStyle,setTextAreaStyle] = useState({\r\n    // border: '1px solid grey',\r\n    // 'border-style': 'solid none',\r\n  })\r\n  return (\r\n    <div className={`container my-2 bg-${props.bgMode} text-${props.txtMode} rounded`} style={textareaStyle} >\r\n    <div className='container my-2'>\r\n        <h1 className='my-2'>Enter text below</h1>\r\n        <textarea className={`form-control fst-italic bg-${props.textareaBgColor} text-${props.txtMode}`} rows=\"7\" value={text} onChange={handleTextareaOnChange}></textarea>\r\n        <button className='btn btn-primary my-3 mx-2' onClick={handleUppercase}>CONVERT TO UPPERCASE</button>\r\n        <button className='btn btn-primary my-3 mx-2' onClick={handleLowercase}>convert to lowercase</button>\r\n        <button className='btn btn-warning my-3 mx-2' onClick={handleCapitalize}>Capitalize Text</button>\r\n        <button className='btn btn-warning my-3 mx-2' onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        <button className='btn btn-danger my-3 mx-2' onClick={handleClear}>Clear text</button>\r\n    </div>\r\n    <div className='pb-1 container'>\r\n      <h2 className='my-2'>Your text summary</h2>\r\n      <p>{text.split(/\\s+/).filter(element=>{return element.length!==0}).length} words {text.length} characters</p>\r\n      <p>{(0.05 * text.split(\" \").filter(element=>{return element.length!==0}).length).toFixed(3)} minutes read time</p>\r\n      <h3>Preview</h3>\r\n      <p className='preview fst-italic'>{text}</p>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n","\nimport { useState } from 'react';\nimport React  from 'react';\nimport './App.css';\nimport Alert from './Components/Alert';\n// import About from './Components/About/About';\nimport Header from './Components/Header/Header';\nimport Textarea from './Components/Textarea/Textarea';\n// import {\n//   BrowserRouter as Router,Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [setMode,changeMode]=useState('light')\n  const [btnMode,changeBtnMode]=useState('dark')\n  const [modeName,changemodeName]=useState('Enable dark mode')\n  const [alert,setAlert]=useState(null)\n  const [textareaBgColor,setTextareaBgColor] = useState('light')\n  const showAlert= (message,type)=>{\n    setAlert(\n      {msg:message,\n        type:type}\n        )\n        setTimeout(() => {\n          setAlert(null)\n        }, 1000);\n      }\n\n  // document.body.style.backgroundColor =\"#333333\"\n  function handleMode(){\n    if(setMode==='dark'){\n      changeMode('light')\n      changeBtnMode('dark')\n      changemodeName('Enable dark mode')\n      document.body.style.backgroundColor =\"white\"\n      document.title = \"TextUtils\"\n      // showAlert(\"lightmode enabled\",\"success\")\n      setTextareaBgColor('light')\n    }else{\n      changeMode('dark')\n      changeBtnMode('light')\n      changemodeName('Disable dark mode')\n      document.body.style.backgroundColor =\"#333333\"\n      document.title = \"TextUtils - Dark\"\n      // showAlert(\"darkmode enabled\",\"success\")\n      setTextareaBgColor('dark')\n    }\n  }\n  \n  return (\n    <div className='app'>\n    {/* <Router> */}\n    <Header mode={setMode} handleMode={handleMode} btnmode={btnMode} enablemode={modeName} />\n    <Alert alertMsg={alert}/>\n    <div className='body'>\n    <Textarea showAlert={showAlert} bgMode={setMode} textareaBgColor={textareaBgColor} txtMode={btnMode}/>\n    {/* <Routes>\n          <Route exact path=\"/\" element={<Textarea showAlert={showAlert} bgMode={setMode} textareaBgColor={textareaBgColor} txtMode={btnMode}/>}/>\n          <Route exact path=\"/about\" element={<About />}/>\n    </Routes> */}\n    </div>\n    {/* </Router> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}